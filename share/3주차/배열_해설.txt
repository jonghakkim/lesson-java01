[1]
2


[2]
for(int i=0;i<arr.length;i++) {
	sum += arr[i];
}


[3]
for(int i=0; i < arr.length;i++) {
	for(int j=0; j < arr[i].length;j++) {
		total += arr[i][j];
	}
}
average = total /(float)(arr.length * arr[0].length);


2차원 배열이라 2중 for문을 사용해야한다

평균을 구할 때는 배열의 모든 요소의 총합을 개수로 나누면 되는데 int로 나누면
나누기 int이기 때문에 결과를 int로 얻으므로 소수점 이하의 값을 얻을 수 없다 
그래서 나누는 값을 float로 형변환 해주었다 

만일 float로 형변환을 해주지 않으면 avaerage 는 16.25가 아닌 16.0이 될 것이다.
(average의 타입이 float이므로 16을 저장하면 16.0이 된다.) 


1. int형 보다 크기가 작은 자료형은 int형으로 형변환 후에 연산을 수행한다
	byte / short 
	→ int / int  
	→ int

2. 두 개의 피연산자 중 자료형의 표현범위가 큰 쪽에 맞춰서 형변환 된 후 연산을 수행한다
  int / float 
  → float / float 
  → float 

3. 정수형 간의 나눗셈에서 0으로 나누는 것은 금지되어 있다


[4]
(1)
	tmp = ballArr[i];
	ballArr[i] = ballArr[j];
	ballArr[j] = tmp;
(2)
	System.arraycopy(ballArr,0, ball3,0,3);


1~9의 숫자를 배열에 순서대로 담고 반복해서 위치를 서로 바꿈으로써 숫자를 
섞는다. 그 다음에 배열의 세 요소를 차례대로 가져오면 중복되지 않은 세 개의 정수를 
얻을 수 있다. 그 다음엔 배열 ballArr에서 세 개의 값을 배열 ball3으로 복사한다.

편의상 맨 앞의 세 값을 ball3 로 복사하기로 하자.

System.arraycopy(ballArr, 0, ball3, 0, 3);
=> ballArr[0]에서 ball3[0]으로 3개의 데이터를 복사


ballArr ballArr[0] ballArr[1] ballArr[2] ballArr[3] ballArr[4] ballArr[5] ballArr[6] ballArr[7] ballArr[8]
0x100   4          8          6          1          7          5          3          9          2
        0x100
        
ball3 ball3[0] ball3[1] ball3[2]
0x200 4        8        6
      0x200


[5]
System.out.println(coinUnit[i]+"원 : "+money/coinUnit[i]);
money = money%coinUnit[i];

동전의 단위를 내림차순으로 배열에 초기화한다 
금액이 큰 동전을 우선적으로 지불해야 가장 적은 동전의 개수로 거스름돈을 줄 수 있기 때문이다 
그렇지 않으면 모든 거스름돈을 10원짜리로만 주게 될 수도 있다.

변수 money를 coinUnit[i]로 나누면 지불할 동전의 개수가 되고 나머지 연산을 하면 
coinUnit[i] 로 지불하고 남은 금액이 된다. 동전단위 (coinUnit 배열)의  개수만큼 
이 과정을 반복하면 된다.

money coinUnit[i] money/coinUnit[i] money%coinUnit[i]
2680  500         5                 180
180   100         1                 80
80    50          1                 30
30    10          3                 0


[6]
class Exercise5_10 {
	public static void main(String[] args) {
		char[] abcCode =
		{ 
		  '`','~','!','@','#','$','%','^','&','*',
		  ===========  
		  '(',')','-','_','+','=','|','[',']','{',
		  '}',';',':',',','.','/'
		};

		// 0 1 2 3 4 5 6 7 8 9
		char[] numCode = {'q','w','e','r','t','y','u','i','o','p'};
		                      ===========    

		String src = "abc123";
		String result = "";
		
		// 문자열 src의 문자를 charAt()으로 하나씩 읽어서 변환 후 result에 저장
		for(int i=0; i < src.length();i++) {
			char ch = src.charAt(i);
			
			// 정답 부분
			if('a' <= ch && ch <='z') {
				result += abcCode[ch-'a'];
			} else if('0' <= ch && ch <='9') {
				result += numCode[ch-'0'];
			}
			// 정답 부분
			
		}
		System.out.println("src:"+src);
		System.out.println("result:"+result);
	} // end of main
} // end of class


문자열을 반복문과 chatAt(int i)을 이용해서 한 문자씩 배열에 있는 암호코드로 
변경해서 암호화하는 문제이다.

암호코드는 영어소문자와 숫자로 나뉘어져 있는데 영어소문자인 경우 배열 abcCode에서
해당 암호코드를 얻고 숫자인 경우에는 배열 numCode에서 암호코드를 얻도록 되어 있다

그래서 조건문으로 문자가 영어소문자인 경우와 숫자인 경우를 나누어서 처리했다.

if('a' <= ch && ch <='z') {
	result += abcCode[ch-'a'];
} else if('0' <= ch && ch <='9') {
	result += numCode[ch-'0'];
}

암호코드배열 abcCode에는 문자 'a' 시작해서 문자 'z'까지의 암호코드가 순서대로 
저장되어 있기 때문에 문자 'a'의 암호코드는 abcCode[0]이고 문자 'c'의 암호코드는 
abcCode[2] 이다.   
즉 영어소문자 ch의 암호코드는 abcCode[ch-'a']로 표현할 수 있는 것이다.

만일 문자 ch가 'c'였다면 조건식 'a' <= ch && ch <='z'가 true가 되어 
result+= abcCode[ch-'a']; 가 수행된다 

이 문장은 아래와 같은 순서로 연산이 진행된다
result+= abcCode[ch-'a']; 
→ result+= abcCode['c'-'a'];
→ result+= abcCode[2]; → result+= '!';

알파벳이나 숫자는 문자코드가 연속적으로 할당되어 있기 때문에 'c'에서 'a'를 빼면 
2를 결과로 얻는다.
'c'-'a' 
→ 99 - 97 
→ 2

뺄셈과 같은 이항연산자는 int타입보다 작은 타입은 피연산자 (byte, short, char)은   
int로 변환한다 
그래서 'c'-'a'은 99-97 로 변환되고 그 결과는 숫자 2가 된다 
참고로 문자 'a'와 'c'의 코드는 아래와 같다

문자 문자코드
... ...
‘a’ 97
‘b’ 98
‘c’ 99
‘d’ 100
... ...


[7]
for(int j=0;j<question.length;j++) {
	int idx = (int)(Math.random() * question.length);
	char tmp = question[i];
	question[i] = question[idx];
	question[idx] = tmp;
}