[1]
System.out.println(1 + x << 33);
=> 덧셈이 우선순위가 높다
=> 3 << 33 
=> 정수는 32bit 이므로 1번만 시프트한다.
=> 3 << 1
=> 3 * 2**1 = 6

System.out.println(y >= 5 || x < 0 && x > 2);
=> && 연산자가 우선 순위가 높다.
=> true

System.out.println(y += 10 - x++);
=> y = y + (10 - x++)
=> 13

System.out.println(x+=2)


System.out.println( !('A' <= c && c <='Z') );
=> 변수 c의 값이 대문자가 아닌지를 확인하는 조건식
=> false

System.out.println('C'-c);
=> 이항연산자는 피연산자가 int보다 작은 타입(byte, short, char)인 경우 
   음에 연산을 수행한다
=> 67 - 65 = 2

System.out.println('5'-'0');
=> 53 - 48 = 6

System.out.println(c+1);
=> 65 + 1


System.out.println(++c);
=> 단항연산자인 '++'은 이항연산자와 달리 int보다 작은 타입도 형변환을 하지 않는다
=> B

System.out.println(c++);
=> B

System.out.println(c);
=> C


[2]
=> 정수값(numOfBucket) 나눗셈 연산의 특징은 반올림을 하지 않고 버림을 한다.
=> numOfApples/sizeOfBucket + (numOfApples%sizeOfBucket > 0 ? 1 : 0)


[3]
=> 삼항연산자를 사용하면 2가지 경우의 수를 처리할 수 있다 
=> 삼항연산자에 삼항연산자를 포함시키면 3가지 경우의 수를 처리할 수 있다
=> num > 0 ? "양수": (num < 0 ? "음수" : "0")


[4]
byte c = (byte)(a + b);

ch = (char)(ch + 2);

float f = 3 / 2f;
              --

long l = 3000 * 3000 * 3000L;
                       -----
=> int형의 최대값인 약 2*10^9 값은 오버플로우가 발생한다.

boolean result = (float)d==f2;
                 --------
=> 비교연산자도 이항연산자 이기 때문에 크기가 큰 타입으로 형변환하여 연산한다.
